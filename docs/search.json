[
  {
    "objectID": "HMW3.html",
    "href": "HMW3.html",
    "title": "HMW3",
    "section": "",
    "text": "Code to read the data from hmw2\n\nload(\"hw2_list.rda\")\n\n1 - Creating a new column status in each dataframe\n\nbp_list$treatment$status &lt;- character(nrow(bp_list$treatment))\nbp_list$placebo$status &lt;- character(nrow(bp_list$placebo))\n\n2 - I created the for loop and used the if/then/else logic to create the values inside the column status for the treatment data frame\n\nfor (i in 1:nrow(bp_list$treatment)) {\n  if (bp_list$treatment$post_bp[i] &lt;= 120) {\n    bp_list$treatment$status[i] &lt;- \"optimal\"\n  } else if (bp_list$treatment$post_bp[i] &gt; 120 && bp_list$treatment$post_bp[i] &lt;= 130) {\n    bp_list$treatment$status[i] &lt;- \"borderline\"\n  } else {\n    bp_list$treatment$status[i] &lt;- \"high\"\n  }\n}\n\n3 - I created the for loop and used the if/then/else logic to create the values inside the column status for the placebo data frame\n\nfor (i in 1:nrow(bp_list$placebo)) {\n  if (bp_list$placebo$post_bp[i] &lt;= 120) {\n    bp_list$placebo$status[i] &lt;- \"optimal\"\n  } else if (bp_list$placebo$post_bp[i] &gt; 120 && bp_list$placebo$post_bp[i] &lt;= 130) {\n    bp_list$placebo$status[i] &lt;- \"borderline\"\n  } else {\n    bp_list$placebo$status[i] &lt;- \"high\"\n  }\n}"
  },
  {
    "objectID": "HMW3.html#task-1-control-flow-practice",
    "href": "HMW3.html#task-1-control-flow-practice",
    "title": "HMW3",
    "section": "",
    "text": "Code to read the data from hmw2\n\nload(\"hw2_list.rda\")\n\n1 - Creating a new column status in each dataframe\n\nbp_list$treatment$status &lt;- character(nrow(bp_list$treatment))\nbp_list$placebo$status &lt;- character(nrow(bp_list$placebo))\n\n2 - I created the for loop and used the if/then/else logic to create the values inside the column status for the treatment data frame\n\nfor (i in 1:nrow(bp_list$treatment)) {\n  if (bp_list$treatment$post_bp[i] &lt;= 120) {\n    bp_list$treatment$status[i] &lt;- \"optimal\"\n  } else if (bp_list$treatment$post_bp[i] &gt; 120 && bp_list$treatment$post_bp[i] &lt;= 130) {\n    bp_list$treatment$status[i] &lt;- \"borderline\"\n  } else {\n    bp_list$treatment$status[i] &lt;- \"high\"\n  }\n}\n\n3 - I created the for loop and used the if/then/else logic to create the values inside the column status for the placebo data frame\n\nfor (i in 1:nrow(bp_list$placebo)) {\n  if (bp_list$placebo$post_bp[i] &lt;= 120) {\n    bp_list$placebo$status[i] &lt;- \"optimal\"\n  } else if (bp_list$placebo$post_bp[i] &gt; 120 && bp_list$placebo$post_bp[i] &lt;= 130) {\n    bp_list$placebo$status[i] &lt;- \"borderline\"\n  } else {\n    bp_list$placebo$status[i] &lt;- \"high\"\n  }\n}"
  },
  {
    "objectID": "HMW3.html#task-2-function-writing",
    "href": "HMW3.html#task-2-function-writing",
    "title": "HMW3",
    "section": "Task 2: Function Writing",
    "text": "Task 2: Function Writing\nHere Iâ€™m just following the steps to create the function from the hmw. At the end I combined the result into a named vector to store all six values and then assigned meaningful names to each value in the vector.\n\nstats_function &lt;- function(data_list, stat = \"mean\") {\n\n  my_fun &lt;- get(stat)\n  \n  df_treatment &lt;- data_list$treatment\n  df_placebo &lt;- data_list$placebo\n  \n  pre_treatment &lt;- my_fun(df_treatment$pre_bp)\n  post_treatment &lt;- my_fun(df_treatment$post_bp)\n  diff_treatment &lt;- my_fun(df_treatment$diff_bp)\n\n  pre_placebo &lt;- my_fun(df_placebo$pre_bp)\n  post_placebo &lt;- my_fun(df_placebo$post_bp)\n  diff_placebo &lt;- my_fun(df_placebo$diff_bp)\n  \n  stats_result &lt;- c(pre_treatment, post_treatment, diff_treatment, \n              pre_placebo, post_placebo, diff_placebo)\n  \n  names(stats_result) &lt;- c(\"pre_treatment\", \"post_treatment\", \"diff_treatment\",\n                     \"pre_placebo\", \"post_placebo\", \"diff_placebo\")\n  \n  return(stats_result)\n}\n\nNow using the function but not specifying the mean and specifying the variance, standard deviation, minimum and maximum. This will compute the values with how many dataframes we want.\n\nstats_mean &lt;- stats_function(bp_list)\n\nstats_var &lt;- stats_function(bp_list, \"var\")\nstats_sd &lt;- stats_function(bp_list, \"sd\")\nstats_min &lt;- stats_function(bp_list, \"min\")\nstats_max &lt;- stats_function(bp_list, \"max\")"
  }
]